---
import Layout2 from "../layouts/Layout2.astro";
import { Noticia1, Noticia2, Noticia3 } from "../api/ExtraerDatosBillboard.js";
import BotonEstadisticasPrincipales from "../components/BotonEstadisticasPrincipales.jsx";
import {
    db,
    Artista,
    Album,
    Cancion,
    Productor,
    Compone,
    Produce,
    Escucha,
    Gusta,
    Ve, // Importa la tabla Ve
} from "astro:db";
import { desc, eq, and } from "astro:db";
import { parse } from "cookie";

const cookie_acceso = parse(Astro.request.headers.get("cookie") || "");
const haentradoencuenta = cookie_acceso.auth === "true";
const cod_usu = parseInt(cookie_acceso.codigo_usu);

if (Astro.request.method === "POST") {
    const { cod_cancion, cod_artista, cod_usu, cod_album } =
        await Astro.request.json();

    if (haentradoencuenta && cod_usu === cod_usu) {
        if (cod_cancion) {
            const esta_likeado = await db
                .select()
                .from(Escucha)
                .where(
                    and(
                        eq(Escucha.cod_cancion, cod_cancion),
                        eq(Escucha.cod_usuario, cod_usu),
                    ),
                )
                .get();

            if (esta_likeado) {
                await db
                    .delete(Escucha)
                    .where(
                        and(
                            eq(Escucha.cod_cancion, cod_cancion),
                            eq(Escucha.cod_usuario, cod_usu),
                        ),
                    );
            } else {
                await db
                    .insert(Escucha)
                    .values({ cod_cancion: cod_cancion, cod_usuario: cod_usu });
            }
        } else if (cod_artista) {
            const esta_likeado = await db
                .select()
                .from(Gusta)
                .where(
                    and(
                        eq(Gusta.cod_art, cod_artista),
                        eq(Gusta.cod_usuario, cod_usu),
                    ),
                )
                .get();

            if (esta_likeado) {
                await db
                    .delete(Gusta)
                    .where(
                        and(
                            eq(Gusta.cod_art, cod_artista),
                            eq(Gusta.cod_usuario, cod_usu),
                        ),
                    );
            } else {
                await db
                    .insert(Gusta)
                    .values({ cod_art: cod_artista, cod_usuario: cod_usu });
            }
        } else if (cod_album) {
            const esta_likeado = await db
                .select()
                .from(Ve)
                .where(
                    and(
                        eq(Ve.cod_album, cod_album),
                        eq(Ve.cod_usuario, cod_usu),
                    ),
                )
                .get();

            if (esta_likeado) {
                await db
                    .delete(Ve)
                    .where(
                        and(
                            eq(Ve.cod_album, cod_album),
                            eq(Ve.cod_usuario, cod_usu),
                        ),
                    );
            } else {
                await db
                    .insert(Ve)
                    .values({ cod_album: cod_album, cod_usuario: cod_usu });
            }
        }

        return new respuesta_peticion(JSON.stringify({ success: true }), {
            status: 200,
            headers: { "Content-Type": "application/json" },
        });
    } else {
        return new respuesta_peticion(JSON.stringify({ success: false }), {
            status: 403,
            headers: { "Content-Type": "application/json" },
        });
    }
}

const artistas_registrados = await db
    .select()
    .from(Artista)
    .orderBy(desc(Artista.oyentes_art))
    .limit(5);

const albumes = await db
    .select({
        id: Album.cod_album,
        nom_album: Album.nom_album,
        fecha_publicacion: Album.fecha_lanzamiento_album,
        imagen: Album.img_album,
        nom_art: Artista.nom_art,
    })
    .from(Album)
    .innerJoin(Artista, eq(Album.cod_art, Artista.cod_art))
    .orderBy(desc(Album.num_canciones))
    .limit(5);

const canciones = await db
    .select({
        id: Cancion.cod_cancion,
        nom_cancion: Cancion.titulo,
        reproducciones: Cancion.num_reproducciones,
        nom_album: Album.nom_album,
        img_album: Album.img_album,
        nom_productor: Productor.nom_prod,
    })
    .from(Cancion)
    .innerJoin(Album, eq(Cancion.cod_album, Album.cod_album))
    .innerJoin(Produce, eq(Cancion.cod_cancion, Produce.cod_cancion))
    .innerJoin(Productor, eq(Produce.cod_productor, Productor.cod_productor))
    .orderBy(desc(Cancion.num_reproducciones))
    .limit(5);

const ElegirArtistas = await Promise.all(
    canciones.map(async (cancion) => {
        const artistas = await db
            .select({
                nom_art: Artista.nom_art,
            })
            .from(Compone)
            .innerJoin(Artista, eq(Compone.cod_art, Artista.cod_art))
            .where(eq(Compone.cod_cancion, cancion.id));
        return {
            ...cancion,
            artistas: artistas.map((artista) => artista.nom_art),
        };
    }),
);

const canciones_gustadas = haentradoencuenta
    ? await db
          .select({
              id: Cancion.cod_cancion,
              titulo: Cancion.titulo,
              imagen: Album.img_album,
          })
          .from(Escucha)
          .innerJoin(Cancion, eq(Escucha.cod_cancion, Cancion.cod_cancion))
          .innerJoin(Album, eq(Cancion.cod_album, Album.cod_album))
          .where(eq(Escucha.cod_usuario, cod_usu))
    : [];

const artistas_gustados = haentradoencuenta
    ? await db
          .select({
              id: Artista.cod_art,
              id_usuario: Gusta.cod_usuario,
          })
          .from(Gusta)
          .innerJoin(Artista, eq(Gusta.cod_art, Artista.cod_art))
          .where(eq(Gusta.cod_usuario, cod_usu))
    : [];

const albumes_gustados = haentradoencuenta
    ? await db
          .select({
              id: Album.cod_album,
              nombre: Album.nom_album,
              imagen: Album.img_album,
          })
          .from(Ve)
          .innerJoin(Album, eq(Ve.cod_album, Album.cod_album))
          .where(eq(Ve.cod_usuario, cod_usu))
    : [];

const noticias1 = await Noticia1();
const noticias2 = await Noticia2();
const noticias3 = await Noticia3();
---

<Layout2 title="FlowStats">
    <div class="text-center mt-4 mb-4">
        <h1 class="text-4xl font-bold text-gray-800 underline">
            Noticias Principales
        </h1>
    </div>
    <div class="flex justify-center space-x-4">
        {
            noticias1 && (
                <div class="flex max-w-2xl bg-black shadow-lg rounded-lg overflow-hidden mt-4 mb-4 h-40 w-1/2">
                    <img
                        class="w-1/3 h-full object-cover"
                        src={noticias1.url_imagen}
                        alt={noticias1.titulo_noticia}
                    />
                    <div class="w-2/3 p-4 text-white">
                        <a
                            href={noticias1.link}
                            class="text-lg font-bold mb-1 text-white hover:underline block"
                        >
                            {noticias1.titulo_noticia}
                        </a>
                        <p class="text-sm text-gray-300 mb-1">
                            <span class="font-semibold text-white">
                                Escrito por:
                            </span>{" "}
                            {noticias1.autor}
                        </p>
                        <p class="text-sm text-gray-300 mb-1">
                            <span class="font-semibold text-white">
                                Publicado:
                            </span>{" "}
                            {noticias1.fecha_puli}
                        </p>
                    </div>
                </div>
            )
        }
        {
            noticias2 && (
                <div class="flex max-w-2xl bg-black shadow-lg rounded-lg overflow-hidden mt-4 mb-4 h-40 w-1/2">
                    <img
                        class="w-1/3 h-full object-cover"
                        src={noticias2.url_imagen}
                        alt={noticias2.titulo_noticia}
                    />
                    <div class="w-2/3 p-4 text-white">
                        <a
                            href={noticias2.link}
                            class="text-lg font-bold mb-1 text-white hover:underline block"
                        >
                            {noticias2.titulo_noticia}
                        </a>
                        <p class="text-sm text-gray-300 mb-1">
                            <span class="font-semibold text-white">
                                Escrito por:
                            </span>
                            {noticias2.autor}
                        </p>
                        <p class="text-sm text-gray-300 mb-1">
                            <span class="font-semibold text-white">
                                Publicado:
                            </span>
                            {noticias2.fecha_puli}
                        </p>
                    </div>
                </div>
            )
        }
    </div>
    <div class="flex justify-center space-x-4">
        {
            noticias3 && (
                <div class="flex max-w-2xl bg-black shadow-lg rounded-lg overflow-hidden mt-4 mb-4 h-40 w-1/2">
                    <img
                        class="w-1/3 h-full object-cover"
                        src={noticias3.url_imagen}
                        alt={noticias3.titulo_noticia}
                    />
                    <div class="w-2/3 p-4 text-white">
                        <a
                            href={noticias3.link}
                            class="text-lg font-bold mb-1 text-white hover:underline block"
                        >
                            {noticias3.titulo_noticia}
                        </a>
                        <p class="text-sm text-gray-300 mb-1">
                            <span class="font-semibold text-white">
                                Escrito por:
                            </span>
                            {noticias3.autor}
                        </p>
                        <p class="text-sm text-gray-300 mb-1">
                            <span class="font-semibold text-white">
                                Publicado:
                            </span>
                            {noticias3.fecha_puli}
                        </p>
                    </div>
                </div>
            )
        }
    </div>
    <div class="text-center mt-4 mb-4">
        <h1 class="text-4xl font-bold text-gray-800 underline">
            Estadisticas Principales
        </h1>
    </div>
    <BotonEstadisticasPrincipales
        artistas_registrados={artistas_registrados}
        albumes={albumes}
        ElegirArtistas={ElegirArtistas}
        haentradoencuenta={haentradoencuenta}
        usuarioId={cod_usu}
        cancionesLiked={canciones_gustadas}
        artistasLiked={artistas_gustados}
        albumesLiked={albumes_gustados}
        client:load
    />
</Layout2>
